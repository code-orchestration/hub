name: Service Issue Handler

on:
  issues:
    types: [opened, labeled]

jobs:
  handle-service-issue:
    runs-on: ubuntu-latest
    # 이슈에 'service' 레이블이 있을 때만 실행
    if: contains(github.event.issue.labels.*.name, 'service')
    
    permissions:
      issues: write
      contents: write
      actions: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup GitHub CLI
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Extract service name from issue
        id: extract
        run: |
          # 이슈 제목에서 서비스 이름 추출 (예: "[Service] my-app" -> "my-app")
          SERVICE_NAME=$(echo "${{ github.event.issue.title }}" | sed -n 's/.*\[Service\]\s*\(.*\)/\1/p' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          
          # 서비스 이름이 없으면 이슈 번호를 사용
          if [ -z "$SERVICE_NAME" ]; then
            SERVICE_NAME="service-${{ github.event.issue.number }}"
          fi
          
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "Service name: $SERVICE_NAME"
          
      - name: Create new repository
        id: create_repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ADMIN_TOKEN: ${{ secrets.ADMIN_PAT || secrets.GITHUB_TOKEN }} # PAT 없으면 GITHUB_TOKEN 사용
        run: |
          SERVICE_NAME="${{ steps.extract.outputs.service_name }}"
          REPO_NAME="${SERVICE_NAME}-service"
          ORG="${{ github.repository_owner }}"
          
          echo "Creating repository: $ORG/$REPO_NAME"
          
          # GitHub CLI를 사용하여 레포지토리 생성 (PAT가 없어도 작동)
          gh auth login --with-token <<< "$ADMIN_TOKEN"
          
          # 레포지토리 생성 시도
          if gh repo create "$ORG/$REPO_NAME" \
            --public \
            --description "Service repository for $SERVICE_NAME - Auto-generated from issue #${{ github.event.issue.number }}" \
            --add-readme; then
            echo "Repository created successfully"
            echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
            echo "repo_url=https://github.com/$ORG/$REPO_NAME" >> $GITHUB_OUTPUT
          else
            # 레포지토리가 이미 존재하는 경우
            if gh repo view "$ORG/$REPO_NAME" &>/dev/null; then
              echo "Repository already exists, using existing repository"
              echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
              echo "repo_url=https://github.com/$ORG/$REPO_NAME" >> $GITHUB_OUTPUT
            else
              echo "Failed to create repository"
              exit 1
            fi
          fi
          
      - name: Initialize service repository
        env:
          GH_TOKEN: ${{ secrets.ADMIN_PAT || secrets.GITHUB_TOKEN }}
        run: |
          REPO_NAME="${{ steps.create_repo.outputs.repo_name }}"
          ORG="${{ github.repository_owner }}"
          
          # GitHub CLI로 인증
          gh auth login --with-token <<< "$GH_TOKEN"
          
          # 임시 디렉토리에서 작업
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          
          # 새 레포지토리 클론
          gh repo clone "$ORG/$REPO_NAME" -- --depth=1
          cd $REPO_NAME
          
          # 기본 구조 생성
          cat > README.md << EOF
          # ${{ steps.extract.outputs.service_name }} Service
          
          This repository was auto-generated from issue #${{ github.event.issue.number }} in the hub repository.
          
          ## Original Issue
          
          **Title:** ${{ github.event.issue.title }}
          **Author:** @${{ github.event.issue.user.login }}
          **Created:** ${{ github.event.issue.created_at }}
          
          ## Issue Content
          
          ${{ github.event.issue.body }}
          
          ## Links
          
          - [Original Issue](https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }})
          - [Hub Repository](https://github.com/${{ github.repository }})
          EOF
          
          # 기본 디렉토리 구조 생성
          mkdir -p src docs tests .github/workflows
          
          # 기본 .gitignore 생성
          cat > .gitignore << EOF
          # Dependencies
          node_modules/
          vendor/
          
          # Build outputs
          dist/
          build/
          *.exe
          *.dll
          *.so
          *.dylib
          
          # Environment files
          .env
          .env.local
          .env.*.local
          
          # IDE
          .vscode/
          .idea/
          *.swp
          *.swo
          
          # Logs
          logs/
          *.log
          
          # OS
          .DS_Store
          Thumbs.db
          EOF
          
          # 기본 CI/CD 워크플로우 생성
          cat > .github/workflows/ci.yml << 'EOF'
          name: CI
          
          on:
            push:
              branches: [ main ]
            pull_request:
              branches: [ main ]
          
          jobs:
            build:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Build
                  run: echo "Build step placeholder"
                - name: Test
                  run: echo "Test step placeholder"
          EOF
          
          # 변경사항 커밋 및 푸시
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Initialize service repository from issue #${{ github.event.issue.number }}"
          git push origin main
          
          # 정리
          cd /
          rm -rf $TEMP_DIR
          
      - name: Create issue in new repository
        id: new_issue
        env:
          GH_TOKEN: ${{ secrets.ADMIN_PAT || secrets.GITHUB_TOKEN }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          REPO_URL: ${{ github.repository }}
        run: |
          REPO_NAME="${{ steps.create_repo.outputs.repo_name }}"
          ORG="${{ github.repository_owner }}"
          
          # GitHub CLI로 인증
          gh auth login --with-token <<< "$GH_TOKEN"
          
          # 이슈 본문을 파일로 생성 (escape 문제 해결)
          cat > issue_body.md << 'ISSUE_CONTENT_EOF'
          ## Migrated from Hub Repository
          
          This issue was migrated from [hub#${ISSUE_NUMBER}](https://github.com/${REPO_URL}/issues/${ISSUE_NUMBER}).
          
          ### Original Author
          @${ISSUE_AUTHOR}
          
          ### Original Content
          
          ${ISSUE_BODY}
          ISSUE_CONTENT_EOF
          
          # 환경 변수 치환
          envsubst < issue_body.md > issue_body_final.md
          
          # 새 레포지토리에 이슈 생성
          NEW_ISSUE_URL=$(gh issue create \
            --repo "$ORG/$REPO_NAME" \
            --title "$ISSUE_TITLE" \
            --body-file issue_body_final.md \
            --label "migrated,service" 2>/dev/null || echo "")
          
          # 이슈 번호 추출
          if [ -n "$NEW_ISSUE_URL" ]; then
            NEW_ISSUE_NUMBER=$(echo "$NEW_ISSUE_URL" | grep -o '[0-9]*$')
            echo "New issue created: #$NEW_ISSUE_NUMBER"
            echo "new_issue_number=$NEW_ISSUE_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "Warning: Could not create issue in new repository"
            echo "new_issue_number=1" >> $GITHUB_OUTPUT
          fi
          
          # 임시 파일 정리
          rm -f issue_body.md issue_body_final.md
          
      - name: Update original issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const repoName = '${{ steps.create_repo.outputs.repo_name }}';
            const repoUrl = '${{ steps.create_repo.outputs.repo_url }}';
            const org = context.repo.owner;
            
            // 원본 이슈에 댓글 추가
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 🚀 Service Repository Created\n\nA new service repository has been created for this issue:\n\n- **Repository:** [${org}/${repoName}](${repoUrl})\n- **Migrated Issue:** [${repoName}#${{ steps.new_issue.outputs.new_issue_number }}](${repoUrl}/issues/${{ steps.new_issue.outputs.new_issue_number }})\n\n### Next Steps\n1. Continue development in the new repository\n2. This issue will be closed automatically\n3. All further discussions should happen in the new repository`
            });
            
            // 'migrated' 레이블 추가
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['migrated']
            });
            
            // 원본 이슈 닫기
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed',
              state_reason: 'completed'
            });